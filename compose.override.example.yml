# This is a very simple example for using Spotlight for local development,
# exposing the various apps' endpoints to the host, showing examples for
# mounting files, overriding a few Rails settings, etc.
services:
  solr:
    ports:
      - "8983:8983"

  db:
    ports:
      - "3306:3306"
    volumes:
      # If you mirror production's data, you'll want this volume so the db
      # container auto-loads the SQL
      - ./exports/db:/docker-entrypoint-initdb.d

  # nginx proxies all requests, we expose it to the host. DO NOT expose the
  # "web" service directly.
  proxy:
    ports:
      - "3000:80"

  web:
    # Only override this list if you really know what you're doing! In this
    # case, we are saying the app can run without sidekiq. This can be fine in
    # some dev situations, but not all!
    #
    # Note that !override is *not* compatible with podman compose yet.
    depends_on: !override
      - db
      - solr
      - redis
    # Assign a static IP so nginx's cached IP always works - this prevents
    # podman from rotating IPs which can make nginx unhappy
    networks:
      proxy:
        ipv4_address: 10.90.200.200
    volumes: &webvols
      # If you mirror production's files, you'll want this volume
      - ./exports/data:/app/public/uploads/spotlight

      # Mount the whole app in for dev so changes happen instantly. Note,
      # however, that Rails will write a lot of stuff to your host system:
      # log/, tmp/, public/uploads/, even db/schema.rb. You may need this when
      # running rails generators, but otherwise it's not a great idea.
      #
      # NOTE: if you mount this in, files generated by the image definition,
      # such as secret keys, will have to be rebuilt by you manually.
      - .:/app

      # A better, though arguably uglier, approach: just mount in the files /
      # directories that you need to edit in real-time.
      - ./app:/app/app
      - ./build:/app/build
      - ./spec:/app/spec
      - ./test:/app/test
      - ...

  # Any volumes you mount into web should also be mounted into sidekiq,
  # otherwise reindexing breaks. Don't ask how.
  sidekiq:
    volumes: *webvols

networks:
  # Set up a custom subnet so you can have a static IP for the "web" service.
  # NOTE: (a) the subnet *must* include the static IP assigned above, and (b)
  # if you run multiple apps at once, you **must** manually configure the
  # subnets or they can collide!
  proxy:
    driver: bridge
    ipam:
      config:
        - subnet: 10.90.200.0/24
          gateway: 10.90.200.1
